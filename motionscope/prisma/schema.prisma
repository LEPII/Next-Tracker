// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String?
  name      String?
  role      Role     @default(Athlete)
  programs  Program[]
}

enum Role {
  Athlete
  Coach
}

// Represents coach and block relationships
model Program {
  id          Int      @id @default(autoincrement())
  name        String
  coach       User     @relation(fields: [coachId], references: [id])
  coachId     Int
  block       Block?    @relation(fields: [blockId], references: [id])
  blockId     Int?
  exercises   Exercise[]
  completed   Boolean @default(false)
}

// Represent a training block
model Block {
  id          Int      @id @default(autoincrement())
  name        String  
  duration    Int     
  frequency   Int      
  athletes    User[]    @relation(fields: [athleteIds], references: [id])
  athleteIds  Int[]
  programs    Program[]  @relation(fields: [blockId], references: [id])
}

// Represent the specific exercise
model Exercise {
  id          Int      @id @default(autoincrement())
  day         Int?     
  program     Program  @relation(fields: [programId], references: [id])
  programId   Int
  name        String
  sets        Int
  reps        Int
  weight      Float? 
}

// Tracker model to track athlete progress
model Tracker {
  id          Int      @id @default(autoincrement())
  athlete     User     @relation(fields: [athleteId], references: [id])
  athleteId  Int
  program     Program  @relation(fields: [programId], references: [id])
  programId   Int
  completedDate DateTime?
  BlockTotal Int? // Total sets completed (optional)
  notes       String? 
}